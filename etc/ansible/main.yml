---
# - name: include experimental_playbook
#   import_playbook: experimental_playbooks.yml
#   when: false

- name: Automation Project
  hosts: myall
  gather_facts: no
  serial: 8
  # gather_timeout: 60
  connection: network_cli
  ignore_errors: no
  vars_files:
    - vars/common.yml 
  pre_tasks:  
    - name: ping test
      block: 
        - name: Ping test, from Ansible server to host  # fail due to , wrong ip or blocked or firewall,diffrent vlan,acl, or other)
          ping:
            data: pong
          register: test 
          failed_when: test.ping != 'pong'
          ignore_errors: yes
          delegate_to: localhost
          
        - name: Test reachability to 10.10.10.10 using default vrf
          ios_ping:
            dest: 10.240.192.2
      rescue:
        - include_vars: 
            file: "../../host_vars/old_{{inventory_hostname}}.yml"
            name: old2
        - set_fact:
            ansible_host: "{{old2.ansible_host}}"  
    - name: Connectivity test
      block: 
        - name: Connectivity test, from host itself to host itself 
          ios_ping:
              dest: "{{ansible_host}}"     
              state: present
          register: ping
          failed_when: ping.failed == true
    # - name: pre task
    #   include_tasks: pre_task.yml
    #   when: true
    # - name: pre task experimental
    #   include_tasks: experimental_tasks.yml
    #   when: true
  roles: 
    - name: The first role  
      role: "{{roles_1st | default('')}}"
      vars:
        example: "first"
      when: true
    - name: The second role  
      role: "{{roles_2nd | default('')}}"
      vars:
        example: "second"
      when: true
    - "{{roles_3rd  | default('')}}"
    - "{{roles_4th  | default('')}}"
    - "{{roles_5th  | default('')}}"
    - "{{roles_6th  | default('')}}"
    - "{{roles_7th  | default('')}}"
    - "{{roles_8th  | default('')}}"
    - "{{roles_9th  | default('')}}"
    - "{{roles_10th | default('')}}"
    - "{{roles_11th | default('')}}"
    - "{{roles_12th | default('')}}"
    # .............................
    - "{{roles_last | default('')}}"
  tasks:   
  post_tasks:

- name: Management migration playbook
  import_playbook: management_vlan_migration_v3.yml
  #when: not hostvars[inventory_hostname].ping.failed  # conditional ?? (conditional masih salah , sementara ini dulu)

- name: Finishing playbook
  import_playbook: finished.yml  # the conditional is processed inside the playbook








































#######################################################################################

    # - block:
      
      
      # - pause:
      #     prompt: ""
      # - name: add host to group 'just_created' with variable foo=42
      #   add_host:
      #     name: "{{ ip_from_ec2 }}"
      #     groups: just_created
      #     foo: 42

      # - name: add host to multiple groups
      #   add_host:
      #     hostname: "{{ new_ip }}"
      #     groups:
      #       - group1
      #       - group2

      # - name: add a host with a non-standard port local to your machines
      #   add_host:
      #     name: "{{ new_ip }}:{{ new_port }}"

      # - name: add a host alias that we reach through a tunnel (Ansible <= 1.9)
      #   add_host:
      #     hostname: "{{ new_ip }}"
      #     ansible_ssh_host: "{{ inventory_hostname }}"
      #     ansible_ssh_port: "{{ new_port }}"

      # - name: add a host alias that we reach through a tunnel (Ansible >= 2.0)
      #   add_host:
      #     hostname: "{{ new_ip }}"
      #     ansible_host: "{{ inventory_hostname }}"
      #     ansible_port: "{{ new_port }}"

      # - name: Ensure inventory vars are set to the same value as the inventory_hostname has (close to pre 2.4 behaviour)
      #   add_host:
      #     hostname: charlie
      #     inventory_dir: "{{inventory_dir}}"
   
    # - say:
    #     msg: '{{ inventory_hostname }}In computing, Ansible is an open-source software provisioning, configuration management, and application deployment tool. It runs on many Unix-like systems, and can configure both Unix-like systems as well as Microsoft Windows. It includes its own declarative language to describe system configuration. Wikipedia'
    #     voice: indonesian
    #   delegate_to: localhost
    # - name: Init Delegate to localhost
    #   block: 
    #     # - name: Sending an e-mail using Gmail SMTP servers
    #       mail:
    #         host: smtp.gmail.com
    #         port: 587
    #         username: samidatodraw@student.telkomuniversity.ac.id
    #         password: bnuesdqz
    #         to: Dimas bayu <wardota8@gmail.com>
    #         subject: Ansible-report
    #         body: "On {{lookup('pipe', 'date')}}\n System has been started to be provisioned \n"
    #         attach: 
    #           - dump/gns_topology.PNG
    #         subtype: plain
    #         headers:
    #           - Reply-To=john@example.com
    #           - X-Special="Something or other"
    #           - Feedback-To="@wardota8"
        
    # - pause:
    #     prompt: ""
    #       register: prompt 
    #       until: prompt.user_input | regex_search('\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}')
    #       when: ansible_hostasd is undefined
    #       retries: "{{retries}}"
    #       # no_log: yes
    #       # run_once: yes
    #     - pause:
    #         prompt: "TARGET HOST or IP undefined, Please cancel or type IP Address of host {{hostname}} "
    #       register: prompt_host
    #       when: ansible_hostasd is undefined
    #     - pause:
    #         prompt: "ansible_ssh_user enter to continue"
    #       when: ansible_ssh_userasd is undefined and ansible_userasd is undefined
    #       register: prompt_user
    #     - pause:
    #         prompt: "ansible_ssh_passPress enter to continue"
    #         echo: no
    #       when: ansible_ssh_passasd is undefined and ansible_padass is undefined
    #       register: prompt_pass
    #     - debug:  
    #         var: prompt_host.user_input |replace('\\b','')| regex_replace('(.*)(\d*.\d*.\d*.\d*)','$2')
    #   delegate_to: localhost



#######################################################################################



        # - pause:
        
    #     - debug:
    #         msg: 
    #           - "FAILED because,{{test.msg}}"
    #           - "ip: {{ansible_host}} , hostname: {{hostname}} , user: {{ansible_ssh_user}} , pass: {{ansible_ssh_pass|hash('sha1')}}"
    #       when: test.failed
    #       failed_when: test.failed
    #       delegate_to: localhost
    #   rescue:
    #     - debug:
    #         msg: "'Plz input input username ofy'"
    #       delegate_to: localhost
    #     - pause:
    #         prompt: "Provide a value for example_var. Enter defaults to 'example_value':"
    #       when: example_var is not defined
    #       register: example_var
    #       delegate_to: localhost
 
    #     - name: Default for example_var
    #       set_fact:
    #         example_var: example_value
    #       when: example_var == ""
    #       delegate_to: localhost
    #     # - pause:
    #     #     prompt: undefined # not required. Optional text to use for the prompt message.
    #     # - set_fact:
    #     #     key: 
    #     - debug:
    #         var: example_var
    #       delegate_to: localhost

  
    #     # - debug: 
    #     #     msg: "ip: {{ansible_host}} , hostname: {{hostname}} , user: {{ansible_ssh_user}} , pass: {{ansible_ssh_pass|hash('sha1')}}"
    #     # - set_fact:
    #     #     ansible_host_status: 
    #     # - name: get show 
    #     #   ios_command:
    #     #     commands:
    #     #       - "show version"
    #     #   register: init_ping

    #         # #     - set_fact:
    #         # #         host_ip: "{{ansible_host}}"
    #         # #         username: "{{ansible_ssh_user}}"
    #         # #         password: "{{ansible_ssh_pass}}"
            # #         new_ansible_host: 10.240.192.20 



#######################################################################################

  # TEST
            # # - name: get user,pass,target
            # #   block:
            # #     - set_fact:
            # #         host_ip: "{{ansible_host}}"
            # #         username: "{{ansible_ssh_user}}"
            # #         password: "{{ansible_ssh_pass}}"
            # #         new_ansible_host: 10.240.192.20 
            # #   when: pre_tasks.init == true 
            #         # #==================================  
            #         #     - debug:
            #         #         var: ansible_host
            #         #         verbosity: 2 #"{{ verbosity }}" 
            #         #     - debug:
            #         #         var: hostname
            #         #         verbosity: 2 #"{{ verbosity }}" 
            #         #     - debug:
            #         #         var: "{{hostname}}"
            #         #         verbosity: 2 #"{{ verbosity }}"    
            #         #       register: host_db        
            #         # - name: test set hostname
            #         #   ios_config:
            #         #     lines:
            #         #       - hostname {{hostname}}
            #         #     provider:
            #         #       timeout: "{{ timeout }}"
            #         #   delay: "{{ delay }}"
            #         #   retries: "{{ retries }}"
            #         #   ignore_errors: yes
            #         #   register: result
            #         #   until: result.changed
            #               # provider:
            #               #   password: "{{password}}"
            #               #   username: "{{username}}"
            #               #   timeout: "{{ timeout }}"
            #                 # host: "{{host_ip}}"
            #       register: output
            #     #   #switch host target
            #     # - set_fact:
            #     #     ansible_host: "{{new_ansible_host}}"
            #     #     ansible_user: "{{new_ansible_user}}" 
            #     #     ansible_password: "{{new_ansible_password}}"
            #     # - name: get show 2
            #     #   ios_command:
            #     #     commands:
            #     #       - "show run"
            #     #           # provider:
            #     #           #   password: "{{password}}"
            #     #           #   username: "{{username}}"
            #     #           #   timeout: "{{ timeout }}"
            #     #             # host: "{{host_ip}}"
            #     #   register: output
            #     - set_fact:
            #         ansible_case: usage
            #   when: pre_tasks.pingtest == true

