#phase one
##part1 add vlan
- name: mgmn new add vlan
  block:
    - when: mgmnt.changes.vlan_id == true and mgmnt.changes.vlan_name == false  
      name: ganti nama vlan jadi old
      ios_vlan:
        vlan_id: "{{ item.id }}"
        name: "{{ item.name }}_old"
        state: present
      loop: "{{ running_cfg_main_vlan }}"
      register: ganti_nama_vlan_jadi_old
      # failed_when: false # what condition it might fail ??

    - ios_vlan:
        vlan_id: "{{ item.id }}"
        name: "{{ item.name }}"
        state: present
      loop: "{{ intended_cfg_main_vlan }}"
      when: mgmnt.changes.vlan_name == true
      register: output
      name: ganti atau tambah vlan 

##part2 add switchport
- name: mgmn new add switchport 
  block: 
  - name: Firstly allow all vlan 
    ios_config:
      parents: "interface {{tmp_n_allowed[index].0}}"
      lines: switchport trunk allowed vlan all
    loop: "{{ tmp_n_allowed }}"
    loop_control:
      index_var: index
  - name: Then remove the not allowed 
    ios_l2_interface:
      name : "{{ tmp_n_allowed[index].0 }} "
      trunk_vlans : "{{ tmp_n_allowed[index].1 }}"
      state : absent
      mode  : trunk
    loop: "{{ tmp_n_allowed }}"
    loop_control:
      index_var: index
    when: tmp_n_allowed[index].1 != ""
  when: tmp_n_allowed is defined #when: mgmnt.changes.sw_port and (tmp_n_allowed is defined)

#part3 add ip
- name: change timeout
  delegate_to: localhost
  block: 
  - set_fact:
      command_timeout: "{{ lookup('ini', 'command_timeout section=persistent_connection file=ansible.cfg') }}"
  - lineinfile:
      path: "{{playbook_dir}}/ansible.cfg"
      regexp: '^command_timeout'
      line: 'command_timeout = 5'
- name: mgmn new add ip
  when: mgmnt.changes.vlan_id or mgmnt.changes.ip or mgmnt.changes.prefix
  ios_l3_interface: 
    name: "{{ item.name }}"
    state: present
    ipv4: "{{ item.ip | ipv4('host/prefix') }}"
  loop: "{{ intended_cfg_main_int_vlan }}"
  ignore_unreachable: yes
  ignore_errors: yes
- delegate_to: localhost
  lineinfile:
    path: "{{playbook_dir}}/ansible.cfg"
    regexp: '^command_timeout'
    line: "command_timeout = {{command_timeout}}"

##part4 reconnect
- when: mgmnt.changes.ip and not mgmnt.changes.vlan_id
  block:
    - delegate_to: localhost
      block:
        - set_fact:
            ansible_host_backup: "{{ ansible_host }}"
            ansible_host: "{{ intended_cfg_main_int_vlan[0].ip| ipv4('address') }}"
        - name: Ping test, from Ansible server to host  
          register: test 
          failed_when: test.ping != 'pong'
          ignore_errors: yes
          ping:
            data: pong
    - block:
        - name: Connectivity test, from host itself to host itself 
          register: ping
          ignore_errors: yes
          failed_when: ping.failed == true
          ios_ping:
            dest: "{{ansible_host}}"     
            state: present
      rescue:
        - delegate_to: localhost
          set_fact:
            ansible_host: "{{ ansible_host_backup }}"

##part5 reinspect
- block:
    - name: get show 
      ios_command:
        commands: 
          - "show interface"
          - "show vlan-switch"
      register: output
- delegate_to: localhost
  ignore_errors: yes
  block:
    - set_fact: 
        sh_interfaces   : "{{ output.stdout[0]  | parse_cli(\"\"+ role_path +\"/files/ios_show_interface_parser.yml\") }}"
        sh_vlan_switch  : "{{ output.stdout[1]  | parse_cli(\"\"+ role_path +\"/files/ios_show_vlan_switch_parser.yml\")}}"
    - name: save show 
      copy: 
        content: "{{item.content }}"
        dest: "{{item.dest}}"
      with_items:
        - { content: "{{ sh_interfaces | to_nice_json }}", dest: "{{playbook_dir}}/files/{{hostname}}_sh_interfaces.json" }
        - { content: "{{ sh_vlan_switch| to_nice_json }}", dest: "{{playbook_dir}}/files/{{hostname}}_sh_vlan_switch.json" }
    - set_fact:    
        ip_new   : "{{ sh_interfaces  | to_json | from_json | json_query(\"[?contains(name,'vlan \"+intended_cfg_main_vlan[0].id+\"')] | [?contains(ipv4,'\"+intended_cfg_main_int_vlan[0].ip | ipv4('address')+\"')].ipv4|[0].starts_with(to_string(@),'\"+ip_network_rgxed+\"') \") }}" 