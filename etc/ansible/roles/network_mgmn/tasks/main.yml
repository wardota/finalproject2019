#
  #_________________________________________________________________________________________
  #   gather_fact/ios_fact --> parser --> save as old/current variable 
  #   check_initial variable --> compare with old/current variable --> save  compare result
  #   manage/manipulate needed varible for each roles
  #   feed varible to role
  #   execute roles/tasks --> success task --> goes to save results , verify result
  #             --> fail task --> use old/current variable or alternatif, report result
  #_________________________________________________________________________________________

# vlan
# temporary static variable got from roles variable_inspect
# changes or not , valid or not, main or not
  - pause:
      prompt: ""
  - include_vars: ../network_vlan/vars/vlan_db.yml
  - include_vars: 
      file: ../network_vlan/vars/vlan_db_old.yml
      name: old
  - include_vars: 
      file: "../../host_vars/old_{{inventory_hostname}}.yml"
      name: old2
  - set_fact:
      all_id: 1-4094   # 1-4094 string
      mgmnt:
        changes:
          vlan_id   : false # true if vlan id is changed 
          vlan_name : true  # true if vlan name is changed
          ip        : true  # true if ip addr is changed
          prefix    : true  # true if prefix is changed
          int_phy   : false # true if int(Se/F/Ge/Eth) is changed /locked
          sw_port   : true  # true if allowed vlan list is changed
          exist: true # # true if vlan id found in allowed vlan list of switchport trunk
        new_vlan     : "{{ vlan_db        | json_query('[?main==`true`].{name:name, id:vlan_id}')         | mandatory }}"
        # new_vlan   : "{{ vlan_db        | json_query('[?main==`true`].{name:name, id:vlan_id}|[0]')     | mandatory }}"
        old_vlan     : "{{ old.vlan_db    | json_query('[?main==`true`].{name:name, id:vlan_id}')         | mandatory }}"
        int_vlan     : "{{ interface      | json_query('[?main==`true`].{name:name,ip:ip,prefix:prefix}') | mandatory }}"
        old_int_vlan : "{{ old2.interface | json_query('[?main==`true`].{name:name,ip:ip,prefix:prefix}') | mandatory }}"
        int_phy      : "{{ interface      | json_query('[?main==`true`].{name:name,ip:ip,prefix:prefix}') | mandatory }}"
        sw_port      : "{{ interface      | json_query('[?allowed!=[]].{name:name,mode:mode,allowed:allowed}')  }}"
   
  - set_fact:
      allowed_id: "{{mgmnt.sw_port[0].allowed}},{{default_vlan}}" # string e.g. 1094-1098,1957,3101-3102,3104,3151-3152,3152,3154,1,1002-1005
      all_id: "{{(range(all_id.split('-').0|int,all_id.split('-').1|int+1) | list | join(',')) .split(',')}}" # [1,...,4094]
  - set_fact:
      allowed_id_part1: "{{allowed_id.split(',') | json_query('[?contains(@, `-`) == `true`]')}}"  # list e.g. [1094-1098,3101-3102,3151-3152,1002-1005]
      allowed_id_part2: "{{allowed_id.split(',') | json_query('[?contains(@, `-`) == `false`]')}}" # list e.g. [1098,1957,3101,3152,3152,3154,1]
  - set_fact:
      items: "{{range(item.split('-').0|int,item.split('-').1|int+1) | list}}"
    loop: "{{allowed_id_part1}}"
    register: allowed_id_part1
  - set_fact:
      allowed_id: "{{ ([allowed_id_part1 | json_query('results[:].ansible_facts.items'),allowed_id_part2] | flatten | join(',')).split(',')  | unique | sort}}"
  - set_fact:
      not_allowed_id: "{{all_id| difference(allowed_id) }}"
  - set_fact:
      not_allowed_id: "{% for item in not_allowed_id %}{% if loop.last %}{{item}}{% break %}{% elif loop.first %}{{item}}{%if not_allowed_id[loop.index0]|int+1 == not_allowed_id[loop.index0+1]|int%}-{%else%},{%endif%}{% continue %}{% elif (not_allowed_id[loop.index0]|int) - not_allowed_id[loop.index0-1]|int>1 %}{% if (not_allowed_id[loop.index0]|int) - not_allowed_id[loop.index0+1]|int<-1 %}{{item}},{%else%}{{item}}-{%endif%}{% else %}{% if (not_allowed_id[loop.index0]|int) - not_allowed_id[loop.index0+1]|int<-1 %}{{item}},{%else%}{% endif %}{% endif %}{% endfor %}"
      not_allowed_id_v2: "{% for item in not_allowed_id %}{% if loop.last %}{{item}}{% break %}{% elif not_allowed_id[loop.index-2]|int+1 == not_allowed_id[loop.index-1]|int and not_allowed_id[loop.index-1]|int+1 == not_allowed_id[loop.index]|int %}-{% else %}{{item}},{% endif %}{% endfor %}"  
  - set_fact:
      not_allowed_id: "{{not_allowed_id.split(',')|batch(24)|list|flatten}}"  #batch is 24 because maximum line string is 255 character ; (24x9)+39==255 ; 9 is item length possible example : (3000-4000); 39 is reserved for command 'switchport trunk allowed vlan add|remove|except|all'
      not_allowed_id_v2: "{{(not_allowed_id_v2|replace(',-','-')|regex_replace('(-){1,}','-')).split(',')}}"


  #   loop_control:
  #      label: "removing {{not_allowed_id[item:item+36]| join(',')|replace(' ','')}}"

  # - debug:
  #     msg: "{{(not_allowed_id[item-1]|int+1==not_allowed_id[item+1]|int-1 )| replace(false,not_allowed_id[item]) | replace(true,'-')}}"
  #   loop: "{{ range(0|int,not_allowed_id|length|int-1)|list}}"
  #   register: ex4
  # - debug:
  #     var: ex4.results
  #   # when: not_allowed_id[item-1]|int+1!=not_allowed_id[item+1]|int-1
  #   # when: item[0-1]>
  # - set_fact:
  #     not_allowed_id_v2: "{{not_allowed_id | json_query('[?==]')}}"



  # - ios_config:
  #     parents: interface FastEthernet1/14
  #     lines: switchport trunk allowed vlan all
      
  # - ios_l2_interface:
  #     name                : FastEthernet1/14
  #     trunk_vlans : "{{not_allowed_id[item:item+36]| join(',')|replace(' ','')}}"
  #     state : absent
  #     mode  : trunk
  #   loop: "{{ range(0|int,not_allowed_id|length|int,36)|list}}"
  #   loop_control:
  #      label: "removing {{not_allowed_id[item:item+36]| join(',')|replace(' ','')}}"

  # - set_fact:
  #     not_allowed_id: "{{not_allowed_id[item]}}"
  #   loop: "{{ range(0|int,not_allowed_id|length|int)|list}}"
  #   when: not_allowed_id[item-1]|int+1==not_allowed_id[item+1]|int-1
  #   # when: item[0-1]>



  # how to find, int vlan is the vlan mgmnt ?
  - set_fact:
      ansible_host: "{{ item.ip }}"
    loop: "{{ mgmnt.int_vlan }}"
    when: mgmnt.new_vlan[0].id in item.name  
    failed_when: mgmnt.new_vlan[0].id not in item.name  # lanjutan kitka fail belum ada???!!
  # end of variable from roles variable_inspect



  # HAVE TO DO RE:SET VARIABLE and RECON ,if one of these varible is changed/updated
  # * USERNAME
  # * PASSWORD
  # * IP ADDRESS

  # TABLE OF CHAIN CONDITION
  #   _________________________________________________________  
  #   | VLAN ID      |  C  |  -  |  -  |  -  |  C  |  -  |  -  |
  #   | VLAN NAME    |  v  |  C  |  -  |  -  |  v  |  C  |  -  |
  #   | IP/PRFIX(L3) |  v  |  -  |  C  |  -  |  v  |  C  |  -  |          (*) 
  #   | SWPORT (L2)  |  v  |  -  |  -  |  v  |  v  |  -  |  C  |
  #   | INT_PHY(L1)  |  -  |  -  |  -  |  C  |  C  |  -  |  -  | (no intention to give this feature) REASON: because in order to chnage interface physical the new port should already on connected and up condition.
  #   |______________|_____|_____|_____|_____|_____|_____|_____| 
  #  
  # (*) any task execute after ip/prefix changes HAVE TO DO RE:SET VARIABLE and RECON
  #     TIPS: ip/prefix changes execute at very last
#
  # if vlan id changes
  #   if vlan name changes
  #     do vlan changes
  #   else
  #     do changes old vlan name_old
  #
  #   if vlan id declared in sw_port allowed vlan  
  #     do sw_port allowed vlan changes
  #   else 
  #     do warning not declared yet
  #     do add them manually
  #  
  #   do int vlan ip address
  #   do change connection ip new
  #   if recon new ip success 
  #     do delete old vlan id 
  #   else 
  #     do change connection ip old
  #   if recon old ip success
  #     do warning failed ip address dont delete old vlan
  #   else
  #     do emergency we are screwed
#
  #   do check var vlan id change
  #   if (vlan name not changes AND vlan id changes)
  #     do van id changes
  #     do changes old vlan name_old
  #   else (vlan name changes)
  #     do vlan name
  # 
  #   do check var int_phy changes
  #   do check var switch port mode trunk and check old vlan in sw_port allowed vlan
  #   do check var switch port mode trunk and check new vlan in sw_port allowed vlan
  #   if vlan id declared in sw_port allowed vlan
  #      if var int_phy changes
  #        do add new int_phy
  #      do sw_port allowed vlan changes 
  #   else (vlan id declared not in sw_port allowed vlan)
  #     do warning not declared yet, bt add manually
  #     find the managemt vlan id
  #     do add them manually

  #   if vlan id changes or ip changes
  #     do change int vlan ip address
  #     do change connection ip new
  #     if recon new ip success and vlan id changes
  #       do delete old vlan id 
  #     else 
  #       do change connection ip old
  #     if recon old ip success
  #       do warning failed ip address dont delete old vlan
  #     else
  #       do emergency we are screwed
  #
  #   do gather fact show int switchport 
  #   if new vlan in active vlan
  #     do change old sw_trunk vlan to be only old,new,respective vlan
  #     do warning ready to change the phy interfaces after all playbook is done
  #     notify: executed by prompted at very last to chang
  #




  #   
  # BACKUP
  # do changes
  # evaluate changes

#__________________________________________________________________________________________
  # BAGIAN MGMN VLAN,ID,NAME
  
  #   do check var vlan id change
  #   if (vlan name not changes AND vlan id changes)
  #     do van id changes
  #     do changes old vlan name_old
  #   else (vlan name changes)
  #     do vlan name

  - block:
    - when: mgmnt.changes.vlan_id == true and mgmnt.changes.vlan_name == false  
      name: ganti nama vlan jadi old
      ios_vlan:
        vlan_id: "{{ item.id }}"
        name: "{{ item.name }}_old"
        state: present
      loop: "{{ mgmnt.old_vlan }}"
      register: mgmnt_vlan_old_backup
      failed_when: false # what condition it might fail ???
      notify:
      
        # temporarily change old vlan NAME, if ID is changed : *_old
        # ketika vlan id di ganti(true) dan sedangkan vlan name tidak berubah(false) 
        # maka ubah nama vlan lama menjadi *_old 
        # untuk setiap vlan mgmnt (main)
        # lalu simpan sebagai variable : vlan_mgmnt_old_backup
        # apabila gagal maka jalankan failed_when: ???
        # apabila terdapat perubahan notify: ???

    - ios_vlan:
        vlan_id: "{{ item.id }}"
        name: "{{ item.name }}"
        state: present
      loop: "{{ mgmnt.new_vlan }}"
      when: mgmnt.changes.vlan_name == true
      register: mgmnt_vlan_changed
      name: add/change vlan
      notify:
        # set new ID and new NAME
        # ketika vlan name berubah(true) 
        # maka ubah nama vlan


#__________________________________________________________________________________________
  # BAGIAN INT_PHY/SWITCHPORT/TRUNK/L2/VLAN-ALLOWED-VLAN

  
  #   do check var int_phy changes
  #   do convert/split string allowed vlan into list of item allowed vlan
  #   do check var switch port mode trunk and check old/new vlan in sw_port allowed vlan
  #   add old/new vlan into sw_port allowed vlan | unique
  #   if vlan id declared in sw_port allowed vlan
  #      if var int_phy changes
  #        do add new int_phy
  #      do sw_port allowed vlan changes 
  #   else (vlan id declared not in sw_port allowed vlan)
  #     do warning not declared yet in , but added automaticaly
  #
  - block: 

    - ios_config:
        parents: interface FastEthernet1/14
        lines: switchport trunk allowed vlan all
    - ios_l2_interface:
        name : FastEthernet1/14
        trunk_vlans : "{{item | join(',')}}"
        state : absent
        mode  : trunk
      loop: "{{not_allowed_id}}"
    - ios_l2_interface:
        name  : "{{item.name}}"
        trunk_vlans : "{{item.allowed}},{{default_vlan}}"
        state : present
        mode  : trunk
      loop: "{{mgmnt.sw_port}}"
      when: mgmnt.changes.sw_port == true
      register: mgmnt_sw_port_changed

    - ios_l2_interface:
        name                : "{{item.name}}"
        trunk_vlans : "{{item.allowed}}"
        state : absent
        mode  : trunk
      loop: "{{mgmnt.sw_port}}"
      when: mgmnt.changes.sw_port == true
      register: mgmnt_sw_port_changed
  #       # set the vlan as allowed vlan on switch port trunk
  #       # ketika switchport trunk mengalami perubahan(true) dan vlan id mgmn ada di list allowed vlan(true)
  #       # maka rubah vlan allowed vlan yang ada
  #   - debug:
  #       msg: "do warning: vlan id declared not in sw_port allowed vlan , but added automaticaly"
  #       verbosity:  4 #locked
  #     when: not exist   
    # - ios_l2_interface:
    #     name                : FastEthernet1/14
    #     trunk_vlans : "{{exclude}}"
    #     state : present
    #     mode  : trunk
    #   register: mgmnt_sw_port_changed
    #   notify:
    #   notify:

        # set the vlan as allowed vlan on switch port trunk
    #     # ketika switchport trunk mengalami perubahan(true) dan vlan id mgmn ada di list allowed vlan(true)
        # maka rubah vlan allowed vlan yang ada
    - debug:
        msg: "do warning: vlan id declared not in sw_port allowed vlan , but added automaticaly"
        verbosity:  4 #locked
      when: not exist
  - pause:
      prompt: "OK2?"
#__________________________________________________________________________________________
  # BAGIAN IP/PREFIX/INT_VLAN/L3

  #   if vlan id changes or ip changes
  #     do change int vlan ip address
  #     do change connection ip new
  #     if recon new ip success and vlan id changes
  #       do delete old vlan id 
  #     else 
  #       do change connection ip old
  #     if recon old ip success
  #       do warning failed ip address dont delete old vlan
  #     else
  #       do emergency we are screwed
  - block:
    - ios_l3_interface:
        name: "{{ item.name }}"
        state: present
        ipv4: "{{ item.ip }}/{{ item.prefix }}"
      loop: "{{ mgmnt.int_vlan }}"
      when: mgmnt.changes.ip == true or mgmnt.changes.vlan_id == true
      register: mgmnt_int_vlan_changed
      ignore_unreachable: yes
      ignore_errors: yes

        # set IP / PREFIX , if IP/PREFIX/VLAN_ID is changed
        # ketika ip address berubah(true) atau vlan id berubah(true)
        # maka rubah interface name jika berubah dan ip address jika berubah

    # set new connection  by the changes ip 
    - set_fact:
        ansible_host: "{{ item.ip }}"
      loop: "{{ mgmnt.int_vlan }}"
      when: mgmnt.new_vlan[0].id in item.name  
      delegate_to: localhost

    # do test new connection, it should be connected
    - ios_ping:
        dest: 10.240.192.1
      delay: "{{ delay }}"
      retries: "{{ retries }}"
      register: test_ping




  - block: 
    # delete old ip address if  vlan id was changed
    - ios_l3_interface:
        name: "{{ item.name }}"
        state: absent 
        ipv4: "{{ item.ip }}/{{ item.prefix }}"
      loop: "{{ mgmnt.old_int_vlan }}"
      when: not test_ping.failed and mgmnt.changes.ip
      register: delete_mgmnt_old_int_vlan
      
    - set_fact:
        ansible_host: "{{ item.ip }}"
      loop: "{{ mgmnt.old_int_vlan }}"
      when: test_ping.failed
      delegate_to: localhost
      notify:
    
    - ios_ping:
        dest: 10.240.192.1
      delay: "{{ delay }}"
      retries: "{{ retries }}"
      when: test_ping.failed
      register: test_old_ping
    - debug:
        msg: "ping new ip failed, do warning failed ip address dont delete old vlan"
      when: test_ping.failed
    - debug:
        msg: "ping old_ip failed, do emergency we are screwed"
      when: test_old_ping.failed


     # delete old int phy if int was changed
    - ios_l2_interface:
        name  : "{{item.old_int_phy}}"
        state : absent
      loop: "{{mgmnt.old_int_phy}}"
      when: not mgmnt_sw_port_changed.failed
      register: delete_mgmnt_sw_port_changed
  - pause:
      prompt: "OK2?"



