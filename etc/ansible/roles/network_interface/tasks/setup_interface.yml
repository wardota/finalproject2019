---
- name: Include var
  include_vars: interface_db.yml
- name: Include var
  include_vars: roles/network_vlan/vars/vlan_db.yml

## access
- name: set interface unconfigured for access vlan 
  ios_l2_interface:
    name: "{{ item.name }}"
    state: unconfigured
  loop: "{{ interface | json_query('[?mode == `access`][]')}}"     
  loop_control:
    label: "{{ item.name }}" 
  register: result
  until: (result.changed == false) or (result.changed == true)
  retries: 3
  delay: 5
- name: remove all non-default trunking vlan's enabled for access vlan
  ios_l2_interface:
    name: "{{ item.name }}"
    mode: trunk
    trunk_vlans: 2-1001,1006-4094
    state: absent
  loop: "{{ interface | json_query('[?mode == `access`][]')}}"
  loop_control:
    label: "{{ item.name }}" 
  register: result
  until: (result.changed == false) or (result.changed == true)
  retries: 3
  delay: 5
- name: Ensure is configured for access vlan 
  ios_l2_interface:
    name: "{{ item.name }}"
    mode: access
    access_vlan: "{{ item.access_vlan }}"
  loop: "{{ interface | json_query('[?mode == `access`][]')}}"
  loop_control:
    label: "{{ item.name }} {{ item.mode }} {{ item.access_vlan }}" 
  register: result
  until: (result.changed == false) or (result.changed == true)
  retries: 3
  delay: 5


## TRUNK
- name: set interface unconfigured
  ios_l2_interface:
    name: "{{ item.name }}"
    state: unconfigured
  loop: "{{ interface | json_query('[?mode == `trunk`][]')}}"
  loop_control:
    label: "{{ item.name }}" 
  register: result
  until: (result.changed == false) or (result.changed == true)
  retries: 3
  delay: 5
- name: remove all non-default trunk vlan 
  ios_l2_interface:
    name: "{{ item.name }}"
    mode: trunk
    trunk_vlans: 3-1001,1006-4094
    state: absent
  loop: "{{ interface | json_query('[?mode == `trunk`][]')}}"
  loop_control:
    label: "{{ item.name }}" 
  register: result
  until: (result.changed == false) or (result.changed == true)
  retries: 3
  delay: 5
- name: add trunk allowed vlan 
  ios_l2_interface:
    name: "{{ item.name }}"
    mode: trunk
    trunk_vlans: "{{ item.allowed }}"
    state: present
  loop: "{{ interface | json_query('[?mode == `trunk`][]') | json_query('[?allowed != null ][]')}}" # in future feature might need query first , for additional feature
  loop_control:
    label: "{{ item.name }} {{ item.mode }} {{item.allowed }}" 
  register: result
  until: (result.changed == false) or (result.changed == true)
  retries: 3
  delay: 5


## NATIVE TRUNK #remember it must runs after TRUNK
- name: set interface unconfigured for native vlan 
  ios_l2_interface:
    name: "{{ item.name }}"
    state: unconfigured
  loop: "{{ interface | json_query('[?native_vlan != null ][]')}}"
  loop_control:
    label: "{{ item.name }}" 
  when: item.mode == "trunk"
  register: result
  until: (result.changed == false) or (result.changed == true)
  retries: 3
  delay: 5
- name: remove all non-default trunking vlan's enabled for native vlan 
  ios_l2_interface:
    name: "{{ item.name }}"
    mode: trunk
    trunk_vlans: 2-1001,1006-4094
    state: absent
  loop: "{{ interface | json_query('[?native_vlan != null ][]')}}"
  loop_control:
    label: "{{ item.name }} " 
  register: result
  until: (result.changed == false) or (result.changed == true)
  retries: 3
  delay: 5
- name: set native vlan
  ios_l2_interface:
    name: "{{ item.name }}"
    mode: trunk
    native_vlan: "{{item.native_vlan}}"
  loop: "{{ interface | json_query('[?native_vlan != null ][]')}}"
  loop_control:
    label: "{{ item.name }}" 
  register: result
  until: (result.changed == false) or (result.changed == true)
  retries: 3
  delay: 5



##
              #STILL EXPERIMENTAL   
              ## ACCESS  
                  #   - name: set interface unconfigured
                  #     ios_l2_interface:
                  #       name: FastEthernet1/3
                  #       state: unconfigured
                  #     until: (result.changed == false) or (result.changed == true)
                  #     retries: 3
                  #     delay: 5
                  #   - name: remove all non-default trunking vlan's enabled
                  #     ios_l2_interface:
                  #       name: FastEthernet1/3
                  #       mode: trunk
                  #       trunk_vlans: 2-1001,1006-4094
                  #       state: absent
                  #     register: result
                  #     until: (result.changed == false) or (result.changed == true)
                  #     retries: 3
                  #     delay: 5
                  #   - name: Ensure is configured for access vlan {{}}
                  #     ios_l2_interface:
                  #       name: FastEthernet1/3
                  #       mode: access
                  #       access_vlan: 901
                  #     until: (result.changed == false) or (result.changed == true)
                  #     retries: 3
                  #     delay: 5

                  # ## NATIVE TRUNK
                  #   - name: set interface unconfigured
                  #     ios_l2_interface:
                  #       name: FastEthernet1/4
                  #       state: unconfigured
                  #     register: result
                  #     until: (result.changed == false) or (result.changed == true)
                  #     retries: 3
                  #     delay: 5
                  #   - name: remove all non-default trunking vlan's enabled
                  #     ios_l2_interface:
                  #       name: FastEthernet1/4
                  #       mode: trunk
                  #       trunk_vlans: 2-1001,1006-4094
                  #       state: absent
                  #     register: result
                  #     until: (result.changed == false) or (result.changed == true)
                  #     retries: 3
                  #     delay: 5
                  #   - name: set native vlan {{}}
                  #     ios_l2_interface:
                  #       name: FastEthernet1/4
                  #       mode: trunk
                  #       native_vlan: 1097
                  #       trunk_vlans: 
                  #     register: result
                  #     until: (result.changed == false) or (result.changed == true)
                  #     retries: 3
                  #     delay: 5

                  # ## TRUNK
                  #   - name: set interface unconfigured
                  #     ios_l2_interface:
                  #       name: FastEthernet1/5
                  #       state: unconfigured
                  #     register: result
                  #     until: (result.changed == false) or (result.changed == true)
                  #     retries: 3
                  #     delay: 5
                  #   - name: remove all non-default trunk vlan 
                  #     ios_l2_interface:
                  #       name: FastEthernet1/5
                  #       mode: trunk
                  #       trunk_vlans: 3-1001,1006-4094
                  #       state: absent
                  #     register: result
                  #     until: (result.changed == false) or (result.changed == true)
                  #     retries: 3
                  #     delay: 5
                  #   - name: add trunk allowed vlan {{}}
                  #     ios_l2_interface:
                  #       name: FastEthernet1/5
                  #       mode: trunk
                  #       trunk_allowed_vlans: 1098,1500,1957,2001,2018,3003-3009
                  #       state: present
                  #     register: result
                  #     until: (result.changed == false) or (result.changed == true)
                  #     retries: 3
                  #     delay: 5

              # - name: Ensure FastEthernet1/10 is a trunk port and ensure 2-50 are being tagged (doesn't mean others aren't also being tagged)
              #   ios_l2_interface:
              #     name: FastEthernet1/14
              #     mode: trunk
              #     trunk_allowed_vlans:  1098,1500,1957,2001,2018,3003-3009
              #     state: present
                
              # - name: creating vlans
              #   ios_vlan:
              #     vlan_id: 104
              #     name: vlannumber104
              #     state: present
              #   register: creating_vlan
              # - debug:
              #     var: creating_vlan
              #     verbosity: 1
              # - name: Ensure FastEthernet 1/13 is configured for access vlan 104
              #   ios_l2_interface:
              #     name: FastEthernet 1/13
              #     mode: access
              #     access_vlan: 104
              #   register: set_fa_access
              # - debug:
              #     var: set_fa_access
              #     verbosity: 1
              # - name: Show interface FastEthernet 1/3 switchport result
              #   ios_command:
              #     commands: "show interfaces FastEthernet 1/3 switchport"
              #   register: show_interfaces_switchport_fa
              # - name: setvlan through ios_config
              #   ios_config:
              #     lines: name vlannumber101
              #     parents: vlan 101
              # - name: set access to interface
              #   ios_config:
              #     lines: 
              #       - switchport mode access
              #       - switchport access vlan 102
              #     parents: interface FastEthernet 1/14


              # ios_l2_interface - access - trunk - native 
              # - name: Ensure GigabitEthernet0/5 is in its default l2 interface state
              #   ios_l2_interface:
              #     name: FastEthernet1/7
              #     state: unconfigured

              # - name: Ensure GigabitEthernet0/5 only has vlans 5-10 as trunk vlans
              #   ios_l2_interface:
              #     name: FastEthernet1/9
              #     mode: trunk
              #     native_vlan: 1098
              #     trunk_vlans: 5-10

              # - name: Ensure these VLANs are not being tagged on the trunk
              #   ios_l2_interface:
              #     name: FastEthernet1/10
              #     mode: trunk
              #     trunk_vlans: 51-4094
              #     state: absent
              # - name: Ensure FastEthernet1/10 is a trunk port and ensure 2-50 are being tagged (doesn't mean others aren't also being tagged)
              #   ios_l2_interface:
              #     name: FastEthernet1/11
              #     mode: trunk
              #     native_vlan: 1097
              #     trunk_vlans: 2-50
              #     trunk_allowed_vlans: 51-200
              # - name: Ensure these VLANs are not being tagged on the trunk
              #   ios_l2_interface:
              #     name: FastEthernet1/11
              #     mode: trunk
              #     trunk_vlans: 151-4094
              #     state: absent



                # - name: Ensure FastEthernet1/11 is a trunk port and ensure 2-50 are being tagged (doesn't mean others aren't also being tagged)
                #   ios_l2_interface:
                #     name: FastEthernet1/11
                #     state: unconfigured     
                # - name: Ensure FastEthernet1/11 is a trunk port and ensure 2-50 are being tagged (doesn't mean others aren't also being tagged)
                #   ios_l2_interface:
                #     name: FastEthernet1/11
                #     mode: trunk
                #     trunk_vlans: 1,1002-1005,1097,1098
                # - name: Ensure FastEthernet1/12 is a trunk port and ensure 2-50 are being tagged (doesn't mean others aren't also being tagged)
                #   ios_l2_interface:
                #     name: FastEthernet1/12
                #     state: unconfigured     
                # - name: Ensure FastEthernet1/12 is a trunk port and ensure 2-50 are being tagged (doesn't mean others aren't also being tagged)
                #   ios_l2_interface:
                #     name: FastEthernet1/12
                #     mode: trunk
                #     # trunk_vlans: 2-50
                #     trunk_allowed_vlans: 1098,1500,1957,2001,2018,3003-3009
                #     state: absent
                # - name: Ensure these VLANs are not being tagged on the trunk
                #   ios_l2_interface:
                #     name: FastEthernet1/12
                #     mode: trunk
                #     trunk_vlans: 3005-3007
                #     state: absent


              # - set_fact:
              #     unique_access_vlan: "{{interface | json_query('[*].[access_vlan][]') | unique}}"
              # - set_fact:
              #     agg_interface: "{{ item | json_query('[*].[name][]')}}"
              #   loop: "{{ interface }}"
              #   when: item.access_vlan is number
              # - debug:
              #     var:  unique_access_vlan[0]
                # #AGGREGATION METHOD
              # ## access using ios_vlan
              #   - name: Add interfaces to VLAN as mode access
              #     ios_vlan:
              #       vlan_id: 201
              #       interfaces:
              #         - FastEthernet1/1
              #         - FastEthernet1/2
              #       timeout: "{{ set_timeout }}"
              #     # loop: subelement / nested
              #     # when: interface is set as vlan access is defined

              #   - name: Check if interfaces is assigned to VLAN 
              #     ios_vlan:
              #       vlan_id: 202
              #       associated_interfaces:
              #         - FastEthernet1/1
              #         - FastEthernet1/2
              #       timeout: "{{ set_timeout }}"
              #     ignore_errors: yes
              #     register: check_assign_vlan_in_interface
              #   - name:
              #     debug: 
              #       var: check_assign_vlan_in_interface
              #       verbosity: "{{ set_verbosity }}"
              #   - name:
              #     set_fact:
              #       interface_as_access_fail: "{{check_assign_vlan_in_interface.results | json_query('[?failed].item')}}" 

              # ...
              # > IOS_L2_INTERFACE    (/usr/lib/python2.7/site-packages/ansible/modules/network/ios/ios_l2_interface.py)

              #         This module provides declarative management of Layer-2 interfaces on Cisco IOS devices.

              # OPTIONS (= is mandatory):

              # - access_vlan
              #         Configure given VLAN in access port. If `mode=access', used as the access VLAN ID.
              #         [Default: (null)]

              # - aggregate
              #         List of Layer-2 interface definitions.
              #         [Default: (null)]

              # - auth_pass
              #         *Deprecated*
              #         Starting with Ansible 2.5 we recommend using `connection: network_cli' and `become: yes'
              #         with `become_pass'.
              #         For more information please see the L(IOS Platform Options guide,
              #         ../network/user_guide/platform_ios.html).
              #         HORIZONTALLINE
              #         Specifies the password to use if required to enter privileged mode on the remote device.  If
              #         `authorize' is false, then this argument does nothing. If the value is not specified in the
              #         task, the value of environment variable `ANSIBLE_NET_AUTH_PASS' will be used instead.
              #         [Default: (null)]

              # - authorize
              #         *Deprecated*
              #         Starting with Ansible 2.5 we recommend using `connection: network_cli' and `become: yes'.
              #         For more information please see the L(IOS Platform Options guide,
              #         ../network/user_guide/platform_ios.html).
              #         HORIZONTALLINE
              #         Instructs the module to enter privileged mode on the remote device before sending any
              #         commands.  If not specified, the device will attempt to execute all commands in non-
              #         privileged mode. If the value is not specified in the task, the value of environment
              #         variable `ANSIBLE_NET_AUTHORIZE' will be used instead.
              #         [Default: no]
              #         type: bool

              # - mode
              #         Mode in which interface needs to be configured.
              #         (Choices: access, trunk)[Default: access]

              # = name
              #         Full name of the interface excluding any logical unit number, i.e. GigabitEthernet0/1.
              #         (Aliases: interface)

              # - native_vlan
              #         Native VLAN to be configured in trunk port. If `mode=trunk', used as the trunk native VLAN
              #         ID.
              #         [Default: (null)]

              # - provider
              #         *Deprecated*
              #         Starting with Ansible 2.5 we recommend using `connection: network_cli'.
              #         For more information please see the L(IOS Platform Options guide,
              #         ../network/user_guide/platform_ios.html).
              #         HORIZONTALLINE
              #         A dict object containing connection details.
              #         [Default: (null)]
              #         suboptions:
              #           auth_pass:
              #             description:
              #             - Specifies the password to use if required to enter privileged mode on the remote
              #               device.  If `authorize' is false, then this argument does nothing. If the value
              #               is not specified in the task, the value of environment variable `ANSIBLE_NET_AUTH_PASS'
              #               will be used instead.
              #           authorize:
              #             default: 'no'
              #             description:
              #             - Instructs the module to enter privileged mode on the remote device before sending
              #               any commands.  If not specified, the device will attempt to execute all commands
              #               in non-privileged mode. If the value is not specified in the task, the value
              #               of environment variable `ANSIBLE_NET_AUTHORIZE' will be used instead.
              #             type: bool
              #           host:
              #             description:
              #             - Specifies the DNS host name or address for connecting to the remote device over
              #               the specified transport.  The value of host is used as the destination address
              #               for the transport.
              #             required: true
              #           password:
              #             description:
              #             - Specifies the password to use to authenticate the connection to the remote device.   This
              #               value is used to authenticate the SSH session. If the value is not specified
              #               in the task, the value of environment variable `ANSIBLE_NET_PASSWORD' will
              #               be used instead.
              #           port:
              #             default: 22
              #             description:
              #             - Specifies the port to use when building the connection to the remote device.
              #           ssh_keyfile:
              #             description:
              #             - Specifies the SSH key to use to authenticate the connection to the remote device.   This
              #               value is the path to the key used to authenticate the SSH session. If the value
              #               is not specified in the task, the value of environment variable `ANSIBLE_NET_SSH_KEYFILE'
              #               will be used instead.
              #           timeout:
              #             default: 10
              #             description:
              #             - Specifies the timeout in seconds for communicating with the network device for
              #               either connecting or sending commands.  If the timeout is exceeded before the
              #               operation is completed, the module will error.
              #           username:
              #             description:
              #             - Configures the username to use to authenticate the connection to the remote
              #               device.  This value is used to authenticate the SSH session. If the value is
              #               not specified in the task, the value of environment variable `ANSIBLE_NET_USERNAME'
              #               will be used instead.


              # - state
              #         Manage the state of the Layer-2 Interface configuration.
              #         (Choices: present, absent, unconfigured)[Default: present]

              # - trunk_allowed_vlans
              #         List of allowed VLANs in a given trunk port. If `mode=trunk', these are the only VLANs that
              #         will be configured on the trunk, i.e. "2-10,15".
              #         [Default: (null)]

              # - trunk_vlans
              #         List of VLANs to be configured in trunk port. If `mode=trunk', used as the VLAN range to ADD
              #         or REMOVE from the trunk.
              #         [Default: (null)]


              # NOTES:
              #       * For more information on using Ansible to manage network devices see the :ref:`Ansible
              #         Network Guide <network_guide>`
              #       * For more information on using Ansible to manage Cisco devices see the `Cisco
              #         integration page <https://www.ansible.com/integrations/networks/cisco>`_.

              # AUTHOR: Nathaniel Case (@qalthos)
              #         METADATA:
              #           status:
              #           - preview
              #           supported_by: network


              # EXAMPLES:
              # - name: Ensure GigabitEthernet0/5 is in its default l2 interface state
              #   ios_l2_interface:
              #     name: GigabitEthernet0/5
              #     state: unconfigured

              # - name: Ensure GigabitEthernet0/5 is configured for access vlan 20
              #   ios_l2_interface:
              #     name: GigabitEthernet0/5
              #     mode: access
              #     access_vlan: 20

              # - name: Ensure GigabitEthernet0/5 only has vlans 5-10 as trunk vlans
              #   ios_l2_interface:
              #     name: GigabitEthernet0/5
              #     mode: trunk
              #     native_vlan: 10
              #     trunk_vlans: 5-10

              # - name: Ensure GigabitEthernet0/5 is a trunk port and ensure 2-50 are being tagged (doesn't mean others aren't also being tag
              #   ios_l2_interface:
              #     name: GigabitEthernet0/5
              #     mode: trunk
              #     native_vlan: 10
              #     trunk_vlans: 2-50

              # - name: Ensure these VLANs are not being tagged on the trunk
              #   ios_l2_interface:
              #     name: GigabitEthernet0/5
              #     mode: trunk
              #     trunk_vlans: 51-4094
              #     state: absent

              # RETURN VALUES:


              # commands:
              #   description: The list of configuration mode commands to send to the device
              #   returned: always, except for the platforms that use Netconf transport to manage the device.
              #   type: list
              #   sample:
              #     - interface GigabitEthernet0/5
              #     - switchport access vlan 20

