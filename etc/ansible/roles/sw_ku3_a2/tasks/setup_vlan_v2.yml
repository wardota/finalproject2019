
  - debug: 
      var:  host_db.{{hostname}}
      verbosity: "{{ set_verbosity }}"
  # - ios_vlan:
  #     state: absent
  #     aggregate: "{{ myvlanss }} "

## | show vlan command and register it                                     
  - name: get show vlan output a
    ios_command:
      commands:
        - "show vlan-switch"
      timeout: "{{ set_timeout }}"
    register: vlan_output
  - debug: 
      var: vlan_output
      verbosity: "{{ set_verbosity }}"

## | parse and filter to get the id --> set to ios_vlans | list            
  - set_fact: ## | parse and filter to get the id --> set to ios_vlans | list   
      ios_vlans: "{{ vlan_output.stdout[0] | parse_cli('/etc/ansible/exp_ios_show_vlan_parser.yml') | json_query('vlans[*].{vlan_id:id,name:name}') }}"
      #   ios_vlans: '{{ ((vlan_output.stdout[0] | parse_cli("ios_show_vlan_parser.yml") | json_query("vlans[*].id")) | join(" ")).split(" ") }}'
      # vlan_output.stdout[0] from register |
      # ios_show_vlan_parser.yml from a file
      # vlans[*].id from structure  inside vlan_output.stdout[0] from register 
  - debug:    ## | cek var: ios_vlans
      var: ios_vlans 
      verbosity: "{{ set_verbosity }}"


## | filter  vlan_db and get the id and name as item...                    
  - set_fact: ## | query to get vlan_id and name as item...
      vlan_db_pair: "{{vlan_db | json_query('[*].{vlan_id:vlan_id, name:name}')}}"
    #   vlan_db_pair: "{{ vlan_db | items2dict(key_name='vlan_id', value_name='name') }}"
  - debug:    ## | cek var: vlan_db_pair
      var: vlan_db_pair 
      verbosity: "{{ set_verbosity }}"



## | vlan by name                                                          
  - debug: # match item of vlan_db listed on hostname.vlan.by_name
      var: "{{ item.vlan_id }}"
      verbosity: "{{ set_verbosity }}"
    loop: "{{ vlan_db_pair }}"
    when: item.name in vlan.by_name
    register: vlan_db_diff_host_db

    # - debug:
    #     var: vlan_db_pair | json_query('[*].name[]')
  - debug: # match item of vlan_db listed on hostname.vlan.by_name
      var: "{{ item }}"
      verbosity: "{{ set_verbosity }}"
    loop: "{{ vlan.by_name}}"
    when: item in (vlan_db_pair | json_query('[*].name'))
    register: host_db_diff_vlan_db  
  - debug:
      var: host_db_diff_vlan_db
      verbosity: "{{ set_verbosity }}"
  - debug: 
      var: vlan_db_diff_host_db
      verbosity: "{{ set_verbosity }}"
  - set_fact: # get matched item of vlan_db_diff_host_db and set it as match_vlan_db_host_db
      match_vlan_db_host_db: "{{vlan_db_diff_host_db.results | json_query('[?!skipped].item')}}"
  - set_fact: # get unmatched item of vlan_db_diff_host_db and set it as vlan_db_not_match_to_host_db 
      vlan_db_not_match_to_host_db: "{{vlan_db_diff_host_db.results | json_query('[?skipped].item')}}"
  - set_fact: # get matched item of vlan_db_diff_host_db and set it as match_vlan_db_host_db
      match2_vlan_db_host_db: "{{host_db_diff_vlan_db.results | json_query('[?!skipped].item')}}"
  - set_fact: # get unmatched item of vlan_db_diff_host_db and set it as vlan_db_not_match_to_host_db 
      host_db_not_match_to_vlan_db: "{{host_db_diff_vlan_db.results | json_query('[?skipped].item')}}"
  - debug: # this vlan_id of vlan_db is not match with vla nid in hostname_db
      var: vlan_db_not_match_to_host_db  #RETURN vlan_id, name
      verbosity: "{{ set_verbosity }}"
  - debug:
      var: match_vlan_db_host_db #RETURN # vlan_id, name
      verbosity: "{{ set_verbosity }}" 
  - debug:
      var: match2_vlan_db_host_db #RETURN list name
      verbosity: "{{ set_verbosity }}"
  - debug: # ? shpuld we add them but we dont know the id
      var: host_db_not_match_to_vlan_db #RETURN list name
      verbosity: "{{ set_verbosity }}"


## |  set match_vlan_db_host_db  
  - name: set match_vlan_db_host_db present
    ios_vlan:
      vlan_id: "{{item.vlan_id}}"
      name: "{{item.name}}"
      state: present
      timeout: "{{ set_timeout }}"
    loop: "{{ match_vlan_db_host_db }}"
    ignore_errors: yes
    register: set_vlan
    # until: set_vlan.changed == false
    # retries: 3
    delay: 5
    
  - debug:
      var:  set_vlan
      verbosity: "{{ set_verbosity }}"

    ## | setup vlan just the based on interface_db acces_vlan and native_vlan  

  - name: Create vlan for interface_db of hostname based on vlan_db 
    ios_vlan:
      vlan_id: "{{ item.vlan_id }}"
      name: "{{ item.name}}"
      state: present
      timeout: "{{ set_timeout }}"
    loop: "{{vlan_db }}"  
    when: item.vlan_id in interface_db[hostname] | json_query("[*].[access_vlan,native_vlan][]") | unique # ketika: vlan_db.vlan_id ada di (di access_vlan,native_vlan,trunk_allowed_vlan,trunk_allowed_vlan_add dari interface_db)
    register: create_vlan    
    delay: 30
    retries: 3  
        #   - debug:
        #       var: item.vlan_id 
        #     loop: "{{vlan_db }}"
        #     when: item.vlan_id in interface_db[hostname_a2] | json_query("[*].[access_vlan,native_vlan][]") | unique
        # until: reset_vlan.changed == true  # [problem] first deploy value == true , but when maintenance value == false, while if any update or changes then value == true
        # retries: 3
        #   - debug: 
        #       var: interface_db[hostname_a2] | json_query("[*].[access_vlan,native_vlan][]") | unique
        #       verbosity: 2
        ## | Create vlan for interface_db of hostname based on vlan_db
  - debug:
      var: create_vlan
      verbosity: "{{ set_verbosity }}"
        # with_nested: 
        #   # - "{{list1}}"
        #   # - "{{list2}}"
        #   - '{{ ((interface_db[hostname_a2] | selectattr("access_vlan", "defined")| map(attribute="access_vlan") | list ) +( interface_db[hostname_a2] | selectattr("native_vlan", "defined") | map(attribute="native_vlan") | list )) | unique}}'    
        #   - "{{range(0, (vlan_db | length), 1)| list}}"
        # when:     item.0 == vlan_db[item.1].vlan_id or (item.0 == vlan_d
    

  ## | find the a not match vlan from vlan_db in ios_vlan then delete it
  - debug:
      var: "{{ item }}"
      verbosity: "{{ set_verbosity }}"
    loop: "{{ (ios_vlans | json_query('[*].[vlan_id][]') | join (' ')).split(' ')  }}"
    when: (item in (match_vlan_db_host_db | json_query('[*].[vlan_id][]') | join (' ')).split(' ')) or (item in (vlan_db_not_match_to_host_db | json_query('[*].[vlan_id][]') | join (' ')).split(' '))
    register: is_ios_vlans_in
        # - debug:
        #     var: match_vlan_db_host_db | json_query('[*].[vlan_id][]')      
        # - debug:
        #     var: (ios_vlans | json_query('[*].[vlan_id][]') | join(' ')).split(' ')   
        # - debug:
        #       var: "{{ item }}"
        #     loop: "{{ (ios_vlans | json_query('[*].[vlan_id][]') | join (' ')).split(' ')  }}"
        #     when: item in (match_vlan_db_host_db | json_query('[*].[vlan_id][]') | join (' ')).split(' ')
  - debug: 
      var: is_ios_vlans_in
      verbosity: "{{ set_verbosity }}"
  - set_fact:  # get matched item of match_ios_vlans
      ios_vlans_not_match: "{{is_ios_vlans_in.results | json_query('[?skipped].item')}}"
  - set_fact:  # get unmatched item of match_ios_vlans
      ios_vlans_match: "{{is_ios_vlans_in.results | json_query('[?!skipped].item')}}" 
  - debug:
      var: ios_vlans_match
      verbosity: "{{ set_verbosity }}"
  - debug: # 
      var: ios_vlans_not_match
      verbosity: "{{ set_verbosity }}"
  - name: delete vlan
    ios_vlan:
      vlan_id: "{{ item }}"
      state: absent
      timeout: "{{ set_timeout }}"
    loop: "{{ios_vlans_not_match }}"
    register: delete_vlan
    retries: 3


  - name: Add interfaces to VLAN as mode access
    ios_vlan:
      vlan_id: 101
      interfaces:
        - FastEthernet1/3
        - FastEthernet1/4
      timeout: "{{ set_timeout }}"
    # loop: subelement / nested
    # when: interface is set as vlan access is defined

  - name: Check if interfaces is assigned to VLAN 
    ios_vlan:
      vlan_id: 102
      associated_interfaces:
        - FastEthernet1/3
        - FastEthernet1/4
      timeout: "{{ set_timeout }}"
    ignore_errors: yes
    register: check_assign_vlan_in_interface
  - debug: 
      var: check_assign_vlan_in_interface
      verbosity: "{{ set_verbosity }}"
  - set_fact:
      interface_as_access_fail: "{{check_assign_vlan_in_interface.results | json_query('[?failed].item')}}" 
## | experimental                                                          
    # #   - debug:
    # #       var: "{{vlan_db_pair[item]}}"
    # #       verbosity: 0 #4 [USED - DEBUG]
    # #     loop: "{{ vlan_db_pair.keys()}}"
    # #     when: vlan_db_pair[item] in {{hostname}}.vlan.by_name
    # #     register: vlan_on_hostname
    # #   - debug:
    # #       msg: "the id {{item}} with name {{vlan_db_pair[item] | default('blank', true)}} is not listed in vlan.by_name of the hostname"
    # #       verbosity: 0 #2 [NOTIFICATIONAL]
    # #     loop: "{{ vlan_db_pair.keys()}}"
    # #     when: vlan_db_pair[item] not in {{hostname}}.vlan.by_name
    # #     register: vlan_not_on_hostname
    #   - debug: 
    #       var: vlan_on_hostname.results.items()
    #   - debug: 
    #       var: "{{item}}"
    #     loop: "{{ ios_vlans }}"
    #     when: item in vlan_on_hostname.results[::].keys()
    # #   - ios_vlan:
    # #       vlan_id: "{{ item }}"
    # #       name: "{{pair_name_id[item]}}"
    # #       state: present
    #   - debug:
    #       var: "{{ item }}  - {{pair_name_id[item]}}"
    #     loop: "{{ pair_name_id.keys()}}"
    #     when: (item in ios_vlans) in {{hostname}}.vlan.by_name


    # [][Translate value hostname.vlan.by_name to list_vlan_id based on vlan_db ]
    #   - set_fact:                                                      #sifatnya override meski di loop
    #       list_vlan_id: "{{vlan_db | json_query('[*].[vlan_id,name]')  }}"
    #   - debug:
    #       var: item.0
    #     loop: "{{list_vlan_id }}"
    #     when: item.1 in {{hostname}}.vlan.by_name 
    #   - debug:
    #       var: ios_vlans.vlans | json_query("[*].[id][]") 
    #   - debug: 
    #       msg: "{{ item }}"
    #     loop:  '{{ios_vlans.vlans | json_query("[*].[id][]") }}'
    # when:  item in (vlan_db.name in {{}}.vlan.by_name


###############################################
# ANSIBLE DOC IOS VLAN AND EXMAPLE DUMP                                    
  # > IOS_VLAN    (/usr/lib/python2.7/site-packages/ansible/modules/network/ios/ios_vlan.py)
  #         This module provides declarative management of VLANs on Cisco
  #         IOS network devices.
  # OPTIONS (= is mandatory):
  # - aggregate
  #         List of VLANs definitions.
  #         [Default: (null)]
  # - associated_interfaces
  #         This is a intent option and checks the operational state of the
  #         for given vlan `name' for associated interfaces. If the value in
  #         the `associated_interfaces' does not match with the operational
  #         state of vlan interfaces on device it will result in failure.
  #         [Default: (null)]
  #         version_added: 2.5
  # - auth_pass
  #         *Deprecated*
  #         Starting with Ansible 2.5 we recommend using `connection:
  #         network_cli' and `become: yes' with `become_pass'.
  #         For more information please see the L(IOS Platform Options
  #         guide, ../network/user_guide/platform_ios.html).
  #         HORIZONTALLINE
  #         Specifies the password to use if required to enter privileged
  #         mode on the remote device.  If `authorize' is false, then this
  #         argument does nothing. If the value is not specified in the
  #         task, the value of environment variable `ANSIBLE_NET_AUTH_PASS'
  #         will be used instead.
  #         [Default: (null)]
  # - authorize
  #         *Deprecated*
  #         Starting with Ansible 2.5 we recommend using `connection:
  #         network_cli' and `become: yes'.
  #         For more information please see the L(IOS Platform Options
  #         guide, ../network/user_guide/platform_ios.html).
  #         HORIZONTALLINE
  #         Instructs the module to enter privileged mode on the remote
  #         device before sending any commands.  If not specified, the
  #         device will attempt to execute all commands in non-privileged
  #         mode. If the value is not specified in the task, the value of
  #         environment variable `ANSIBLE_NET_AUTHORIZE' will be used
  #         instead.
  #         [Default: no]
  #         type: bool
  # - delay
  #         Delay the play should wait to check for declarative intent
  #         params values.
  #         [Default: 10]
  # = interfaces
  #         List of interfaces that should be associated to the VLAN
  # - name
  #         Name of the VLAN.
  #         [Default: (null)]
  # - provider
  #         *Deprecated*
  #         Starting with Ansible 2.5 we recommend using `connection:
  #         network_cli'.
  #         For more information please see the L(IOS Platform Options
  #         guide, ../network/user_guide/platform_ios.html).
  #         HORIZONTALLINE
  #         A dict object containing connection details.
  #         [Default: (null)]
  #         suboptions:
  #           auth_pass:
  #             description:
  #             - Specifies the password to use if required to enter privileged mode on the rem
  #               device.  If `authorize' is false, then this argument does nothing. If the val
  #               is not specified in the task, the value of environment variable `ANSIBLE_NET_
  #               will be used instead.
  #           authorize:
  #             default: 'no'
  #             description:
  #             - Instructs the module to enter privileged mode on the remote device before sen
  #               any commands.  If not specified, the device will attempt to execute all comma
  #               in non-privileged mode. If the value is not specified in the task, the value
  #               of environment variable `ANSIBLE_NET_AUTHORIZE' will be used instead.
  #             type: bool
  #           host:
  #             description:
  #             - Specifies the DNS host name or address for connecting to the remote device ov
  #               the specified transport.  The value of host is used as the destination addres
  #               for the transport.
  #             required: true
  #           password:
  #             description:
  #             - Specifies the password to use to authenticate the connection to the remote de
  #               value is used to authenticate the SSH session. If the value is not specified
  #               in the task, the value of environment variable `ANSIBLE_NET_PASSWORD' will
  #               be used instead.
  #           port:
  #             default: 22
  #             description:
  #             - Specifies the port to use when building the connection to the remote device.
  #           ssh_keyfile:
  #             description:
  #             - Specifies the SSH key to use to authenticate the connection to the remote dev
  #               value is the path to the key used to authenticate the SSH session. If the val
  #               is not specified in the task, the value of environment variable `ANSIBLE_NET_
  #               will be used instead.
  #           timeout:
  #             default: 10
  #             description:
  #             - Specifies the timeout in seconds for communicating with the network device fo
  #               either connecting or sending commands.  If the timeout is exceeded before the
  #               operation is completed, the module will error.
  #           username:
  #             description:
  #             - Configures the username to use to authenticate the connection to the remote
  #               device.  This value is used to authenticate the SSH session. If the value is
  #               not specified in the task, the value of environment variable `ANSIBLE_NET_USE
  #               will be used instead.
  # - purge 
  #         Purge VLANs not defined in the `aggregate' parameter.
  #         [Default: False]
  # - state
  #         State of the VLAN configuration.
  #         (Choices: present, absent, active, suspend)[Default: present]
  # = vlan_id
  #         ID of the VLAN. Range 1-4094.
  # NOTES:
  #       * Tested against IOS 15.2
  #       * For more information on using Ansible to manage network
  #         devices see the :ref:`Ansible Network Guide
  #         <network_guide>`
  #       * For more information on using Ansible to manage Cisco
  #         devices see the `Cisco integration page
  #         <https://www.ansible.com/integrations/networks/cisco>`_.
  # AUTHOR: Trishna Guha (@trishnaguha)
  #         METADATA:
  #           status:
  #           - preview
  #           supported_by: network
  # EXAMPLES:
  # - name: Create vlan
  #   ios_vlan:
  #     vlan_id: 100
  #     name: test-vlan
  #     state: present
  # - name: Add interfaces to VLAN
  #   ios_vlan:
  #     vlan_id: 100
  #     interfaces:
  #       - GigabitEthernet0/0
  #       - GigabitEthernet0/1
  # - name: Check if interfaces is assigned to VLAN
  #   ios_vlan:
  #     vlan_id: 100
  #     associated_interfaces:
  #       - GigabitEthernet0/0
  #       - GigabitEthernet0/1
  # - name: Delete vlan
  #   ios_vlan:
  #     vlan_id: 100
  #     state: absent
  # RETURN VALUES:
  # commands:
  #   description: The list of configuration mode commands to send to the device
  #   returned: always
  #   type: list
  #   sample:
  #     - vlan 100
  #     - name test-vlan

###############################################
# EXMAPLE DUMP                                                             

  # - name: Add interfaces to VLAN
  #   ios_vlan:
  #     vlan_id: 100
  #     interfaces:
  #       - GigabitEthernet0/0
  #       - GigabitEthernet0/1
  # - name: Check if interfaces is assigned to VLAN
  #   ios_vlan:
  #     vlan_id: 100
  #     associated_interfaces:
  #       - GigabitEthernet0/0
  #       - GigabitEthernet0/1
  # - name: Delete vlan
  #   ios_vlan:
  #     vlan_id: 100
  #     state: absent
  # # ios_l2_interface - access - trunk - native 
  # - name: Ensure GigabitEthernet0/5 is in its default l2 interface state
  #   ios_l2_interface:
  #     name: GigabitEthernet0/5
  #     state: unconfigured
  # - name: Ensure GigabitEthernet0/5 is configured for access vlan 20
  #   ios_l2_interface:
  #     name: GigabitEthernet0/5
  #     mode: access
  #     access_vlan: 20
  # - name: Ensure GigabitEthernet0/5 only has vlans 5-10 as trunk vlans
  #   ios_l2_interface:
  #     name: GigabitEthernet0/5
  #     mode: trunk
  #     native_vlan: 10
  #     trunk_vlans: 5-10
  # - name: Ensure GigabitEthernet0/5 is a trunk port and ensure 2-50 are being tagged (doesn't mean others aren't also being tagged)
  #   ios_l2_interface:
  #     name: GigabitEthernet0/5
  #     mode: trunk
  #     native_vlan: 10
  #     trunk_vlans: 2-50
  # - name: Ensure these VLANs are not being tagged on the trunk
  #   ios_l2_interface:
  #     name: GigabitEthernet0/5
  #     mode: trunk
  #     trunk_vlans: 51-4094
  #     state: absent

  # - name: creating vlans
  #   ios_vlan:
  #     vlan_id: 104
  #     name: vlannumber104
  #     state: present
  #   register: creating_vlan
  # - debug:
  #     var: creating_vlan
  #     verbosity: 1
  # - name: Ensure FastEthernet 1/13 is configured for access vlan 104
  #   ios_l2_interface:
  #     name: FastEthernet 1/13
  #     mode: access
  #     access_vlan: 104
  #   register: set_fa_access
  # - debug:
  #     var: set_fa_access
  #     verbosity: 1
  # - name: Show interface FastEthernet 1/3 switchport result
  #   ios_command:
  #     commands: "show interfaces FastEthernet 1/3 switchport"
  #   register: show_interfaces_switchport_fa
  # - name: setvlan through ios_config
  #   ios_config:
  #     lines: name vlannumber101
  #     parents: vlan 101
  # - name: set access to interface
  #   ios_config:
  #     lines: 
  #       - switchport mode access
  #       - switchport access vlan 102
  #     parents: interface FastEthernet 1/14
