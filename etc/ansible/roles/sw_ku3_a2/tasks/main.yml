- name: Attempt and graceful roll back demo
  block:
    - debug:
        msg: 'I execute normally'
    - name: i force a failure
      command: /bin/false
    - debug:
        msg: 'I never execute, due to the above task failing, :-('
  rescue:
    - debug:
        msg: 'I caught an error'
    - name: i force a failure in middle of recovery! >:-)
      command: /bin/false
    - debug:
        msg: 'I also never execute :-('
  always:
    - debug:
        msg: "This always executes"


- name: Attempt and graceful roll back demo
  block:
    - debug:
        msg: 'I execute normally22343ffwt2'
      register: debug
    - copy:
        content: "{{debug | to_nice_json}}"
        dest: /etc/ansible/files/debug.json  
      notify: run
    - command: /bin/false
  rescue:
    - name: make sure all handlers run
      meta: flush_handlers # required. choices: flush_handlers;refresh_inventory;noop;clear_facts;clear_host_errors;end_play;reset_connection. This module takes a free form command, as a string. There's not an actual option named "free form".  See the examples!,C(flush_handlers) makes Ansible run any handler tasks which have thus far been notified. Ansible inserts these tasks internally at certain points to implicitly trigger handler runs (after pre/post tasks, the final role execution, and the main tasks section of your plays) ,C(refresh_inventory) (added in 2.0) forces the reload of the inventory, which in the case of dynamic inventory scripts means they will be re-executed. If the dynamic inventory script is using a cache, Ansible cannot know this and has no way of refreshing it (you can disable the cache or, if available for your specific inventory datasource (for es.: aws), you can use the an inventory plugin instead of an inventory script). This is mainly useful when additional hosts are created and users wish to use them instead of using the `add_host` module." ,C(noop) (added in 2.0) This literally does 'nothing'. It is mainly used internally and not recommended for general use.,C(clear_facts) (added in 2.1) causes the gathered facts for the hosts specified in the play's list of hosts to be cleared, including the fact cache.,C(clear_host_errors) (added in 2.1) clears the failed state (if any) from hosts specified in the play's list of hosts.,C(end_play) (added in 2.2) causes the play to end without failing the host(s). Note that this affects all hosts.,C(reset_connection) (added in 2.3) interrupts a persistent connection (i.e. ssh + control persist)
      #This module takes a free form command, as a string. There's not an actual option named "free form".  See the examples! `flush_handlers' makes Ansible run any handler tasks which have thus far been notified. Ansible inserts these tasks internally at certain points to implicitly trigger handler runs (after pre/post tasks, the final role execution, and the main tasks section of your plays). `refresh_inventory' (added in 2.0) forces the reload of the inventory, which in the case of dynamic inventory scripts means they will be re-executed. If the dynamic inventory script is using a cache, Ansible cannot know this and has no way of refreshing it (you can disable the cache or, if available for your specific inventory datasource (for es.: aws), you can use the an inventory plugin instead of an inventory script). This is mainly useful when additional hosts are created and users wish to use them instead of using the `add_host` module." `noop' (added in 2.0) This literally does 'nothing'. It is mainly used internally and not recommended for general use. `clear_facts' (added in 2.1) causes the gathered facts for the hosts specified in the play's list of hosts to be cleared, including the fact cache. `clear_host_errors' (added in 2.1) clears the failed state (if any) from hosts specified in the play's list of hosts. `end_play' (added in 2.2) causes the play to end without failing the host(s). Note that this affects all hosts. `reset_connection' (added in 2.3) interrupts a persistent connection (i.e. ssh + control persist) (Choices: flush_handlers, refresh_inventory, noop, clear_facts, clear_host_errors, end_play, reset_connection)